\section{为什么使用haXe？}

在官方网站haxe.org上列举了5条使用haXe的理由\footnote{参见http://haxe.org/doc/why。}：
\begin{enumerate}
\item 同时用于客户端、服务器端及桌面开发的ECMA风格编程
\item 十分快速的编译
\item 高效的类型检查机制
\item haXe为相应的平台增加了更多的语言特性
\item 开放源代码
\end{enumerate}

不过，这些理由并不足以说服人们使用haXe。在实际使用中，人们选择一种编程语言的理由可谓千奇百怪，有的人是因为公司要求使用，有的是因为自己熟悉，还有的仅仅是因为“我喜欢”。更有甚者，部分人选择haXe的理由是“因为haXe编译Flash平台的程序执行效率比较高”，事实上，由于Flash更多地被用于多媒体视觉程序的开发，而这一部分代码的效率受限于Flashplayer，导致haXe其实并不能使其Flash平台的程序执行效率有显著提高\footnote{编者注：由于haXe在Flash9以上平台目标的编译中对字节码进行了大量优化，并且由于format等库的存在，的确可以让开发人员对数值计算过程和调用过程中的消耗降低。但Flash到目前为止，其最主要的运用方向仍然是包括游戏开发在内的显示编程，较大规模的数值计算应用仍然较少，因此haXe实际上在Flash平台的效率优化并不显著。特殊的例外情况是三维引擎的开发。}。这也使得这个理由看起来多少有些自欺欺人。

那么，究竟为什么还要使用haXe呢？本书并不准备说服任何人脱离他原有知识范围的怀抱，改用haXe。之所以用这一本书来介绍haXe的开发，只是希望能够提供给大家更多的选择。
